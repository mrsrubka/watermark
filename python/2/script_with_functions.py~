import numpy as np
#import sys
#sys.path.append('/usr/local/lib/python2.7/site-packages')
import cv2
import random

##################################################

def change_key_word_into_ascii_numbers(key_word):
	key_word_numbers = []
	for i in range(512+1):
		letter = key_word[i%len(key_word)]
		nr_in_ascii = ord(letter)
		key_word_numbers.append(nr_in_ascii)
	return key_word_numbers

def convert_to_seven_bit(string):
	if len(string) == 7:
		return string
	else:
		difference = 7 - len(string)
		newstring = difference * '0'
		newstring += string
		return newstring

def change_message_to_binary_ascii(message):
	message_binary = ""
	message_numbers = []

	for c in message:
		temporary_binary = bin(ord(c))
		seven_bit_binary = convert_to_seven_bit(temporary_binary[2:])
		message_binary += seven_bit_binary
	
	for c in message_binary:
		message_numbers.append(int(c))

	return message_numbers

def write_message_on_image(img,key_word_numbers,message_numbers):
	new_img = img

#	for i in range(len(message_numbers)):
#		y = key_word_numbers[i]
#		if message_numbers[i] == 0:
#			new_img[i,y] = 255
#		else:
#			new_img[i,y] = 0

	for i in range(len(message_numbers)):
		y = key_word_numbers[i]
		if message_numbers[i] == 0:
			if new_img[i,y] % 2 == 0:
				new_img[i,y] += 0 # bez_zmian
			else:
				new_img[i,y] += 1 # zmiana na parzysty
		else:
			if new_img[i,y] % 2 == 0:
				new_img[i,y] += 1 # zmiana na nieparzysty
			else:
				new_img[i,y] += 0 # bez_zmian	
	return new_img

def detect_bits_from_image(new_img,key_word_numbers,message_numbers):
	detected_bits = ""
#	for i in range(len(message_numbers)):
#		y = key_word_numbers[i]
#		if new_img[i,y] >= 127:
#			detected_bits += "0"
#		else:
#			detected_bits += "1"

	for i in range(len(message_numbers)):
		y = key_word_numbers[i]
		if new_img[i,y] %2 == 0:
			detected_bits += "1"
		else:
			detected_bits += "0"
	return detected_bits

def change_detected_bits_to_binary_letters(detected_bits):
	detected_letters_binary = []
	# The line below is writen with the help of
	# http://stackoverflow.com/questions/9475241/split-python-string-every-nth-character
	detected_letters_binary = [detected_bits[i:i+7] for i in range(0, len(detected_bits), 7)]

	#The following line is a alternative:
	#detected_letters_binary = map(''.join, zip(*[iter(detected_bits)]*7))	

	return detected_letters_binary

def change_binary_letters_to_message(detected_letters_binary):
	detected_message = ""
	for item in detected_letters_binary:
		c = chr(int(item,2))
		detected_message += c
	return detected_message

##################################################

# Load an color image in grayscale
img = cv2.imread('lena.bmp',0)

#key_word = "Budapeszt"
key_word = raw_input('Please enter key word.\n')
key_word_numbers = change_key_word_into_ascii_numbers(key_word)
#message ="chromodynamikaKwantowa"
message = raw_input('Please enter your message.\n')
message_numbers = change_message_to_binary_ascii(message)
new_img = write_message_on_image(img,key_word_numbers,message_numbers)

cv2.imshow('image',new_img)
cv2.waitKey(1000)
cv2.imwrite('new_img.bmp',new_img)
cv2.imwrite('new_img.jpeg',new_img)



###########################################

#detected_bits = ""
#for i in range(len(message_numbers)):
#	y = key_word_numbers[i]
#	if new_img[i,y] >= 127:
#		detected_bits += "0"
#	else:
#		detected_bits += "1"



detected_bits = detect_bits_from_image(new_img,key_word_numbers,message_numbers)
detected_letters_binary = change_detected_bits_to_binary_letters(detected_bits)
detected_message = change_binary_letters_to_message(detected_letters_binary)


print "\tDetected message is....", detected_message

